<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Renata Hirota&#39;s website</title>
<link>https://hirota.dev/blog/</link>
<atom:link href="https://hirota.dev/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.554</generator>
<lastBuildDate>Mon, 18 Mar 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>D&amp;D and the dice math</title>
  <dc:creator>Renata Hirota</dc:creator>
  <link>https://hirota.dev/blog/posts/2024-03-18_dice-math/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hirota.dev/blog/posts/2024-03-18_dice-math/d20.webp" class="preview-image img-fluid figure-img" alt="Twenty sided dice"></p>
<figcaption>Photo by <a href="https://unsplash.com/@timothycdykes?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Timothy Dykes</a> on <a href="https://unsplash.com/photos/a-group-of-blue-and-brown-dice-sitting-on-top-of-each-other-jfovL-sc0tQ?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a></figcaption>
</figure>
</div>
<p>Since the Covid pandemic, I really got into D&amp;D. I had never played before, but had friends who had long lasting parties and were DMs, so it was the perfect opportunity since we were all locked up in our houses.</p>
<p>Turns out that it didn’t last more than a few months: we started one campaign at level 1 and disbanded shortly after reaching level 6. Then I found out about Critical Role and became a huge fan (although I’ve given up on Campaign 3…) and started playing with my partner and his friends.</p>
<p>As you can imagine, it wasn’t too long before I started DMing myself and I eventually started watching some of Matt Colville’s Twitch lives and YouTube videos (really recommend those for DMs!). So when Matt’s company MCDM started designing their own RPG, I was pretty excited (if you want to know more about it, you can listen to the podcast <a href="https://www.youtube.com/@the_dice_society">The Dice Society</a>, which covers news on the development of the game).</p>
<p>For me, the game changer for this new RPG is the <em>dice</em>. Everyone who plays D&amp;D, be it 5th edition, AD&amp;D or anything in between, is used to rolling d20s, 20-sided dice<sup>1</sup>. On the other hand, MCDM’s RPG uses 2 regular, 6-sided dice for attacking, making ability checks and other situations in which your character might need to roll. As of now (March 2024), the game is still in development, so it still might change, but they made it very clear that they want to keep the 2d6 system in the final version of the game.</p>
<section id="why-i-love-the-idea-of-the-2d6-system" class="level2">
<h2 class="anchored" data-anchor-id="why-i-love-the-idea-of-the-2d6-system">Why I love the idea of the 2d6 system</h2>
<p>I know: d6s are kind of boring compared to d20s, right? Every Farkle and Yahtzee player uses them, after all. But to me, that could be a great advantage: it’s easy to understand and hit the ground running as soon as you know the basic rules, no need to go through weird dice<sup>2</sup>.</p>
<p>And although I’ve become some sort of <em>dice hoarder</em> for the past years, I love the idea of rolling two dice, and more than that, two d6s, because of <em>variance</em>.</p>
<p>Let’s assume we’re rolling a d20. The possible outcomes range from 1 to 20, and tecnically they all have the same probability, 1/20 = 5%. When rolling 2d6, there is a smaller range of possibilities (2 to 12) and they are not uniformally probable (you would expect to roll 12 much less frequently than 7, for example).</p>
<p>That means your <em>modifier</em> has a much more significant impact on the final result than sheer luck<sup>3</sup>. If you are consistently rolling some value near the mean (7), how good you are at a certain ability will more accurately translate to how successful you are in a skill check or attack. Sure, you can still fumble or do exceptionally well, but those events are less common.</p>
</section>
<section id="simulating-dice-rolls" class="level2">
<h2 class="anchored" data-anchor-id="simulating-dice-rolls">Simulating dice rolls</h2>
<p>I remember when I was younger and my Math teacher gave us an experiment: roll two dice 100 times and take note of the results. At the end of the class, we drew a bar plot with the results and found out that everyone drew basically the same plot.</p>
<p>Let’s do the same, but with the RPG context and in a larger scale. We’ll check how the outcome of a character with a dexterity bonus of +3 would roll for a skill check using different dice systems. (MCDM’s stats are not exactly the same, but let’s just assume they are for this thought exercise.)</p>
<section id="rolling-1d20-1000-times" class="level3">
<h3 class="anchored" data-anchor-id="rolling-1d20-1000-times">Rolling 1d20 1000 times</h3>
<p>Assuming that every side on a 20-sided die is physically the same, it’s fair to conclude that the numbers 1 through 20 have the same probability of being the outcome. Let’s imagine that we’re rolling the die 100 times and counting how many times each side appears.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://hirota.dev/blog/posts/2024-03-18_dice-math/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Now let’s do the same, rolling the die 1000 times.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://hirota.dev/blog/posts/2024-03-18_dice-math/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The results seem random enough and there doesn’t seem to be a clear pattern. Even if we add the modifier (+3), it’s not that great a difference. The modifier matters much less then the roll of a die.</p>
<p>As a game design, it makes sense that extremely good (or bad) results are rare, but it’s weird that average outcomes are equally probable.</p>
</section>
<section id="rolling-2d6-1000-times" class="level3">
<h3 class="anchored" data-anchor-id="rolling-2d6-1000-times">Rolling 2d6 1000 times</h3>
<p>If we were rolling only one d6, we would have a similar situation: all 6 sides have the same probability. However, by adding two dice, we invoke the <strong>Central Limit Theorem</strong>!</p>
<p>What is that, you ask? It’s one of the most important theorems in probability theory that says that, given a sample from a random variable under certain circumstances, the sample mean tends to follow a normal distribution, even if the original variable has a different distribution other than normal. More technically, the limit of a random variable X when n -&gt; Inf is normally distributed. More on that in the next section.</p>
<p>For now, let’s replicate the experiment we did with the d20, this time with 2d6.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://hirota.dev/blog/posts/2024-03-18_dice-math/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This plot shows what we’ve talked before: it’s much more common to roll a 7 than, say, a 12. The same goes for the other end of the curve, too.</p>
<p>Now let’s take a look at what happens if we increase the number of rolls to a thousand:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://hirota.dev/blog/posts/2024-03-18_dice-math/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>And a million:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://hirota.dev/blog/posts/2024-03-18_dice-math/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="the-math-behind-it-the-central-limit-theorem" class="level2">
<h2 class="anchored" data-anchor-id="the-math-behind-it-the-central-limit-theorem">The math behind it: the Central Limit Theorem</h2>
<p>If you are not convinced by this little experiment, the <a href="https://en.wikipedia.org/wiki/Central_limit_theorem">proof</a> for the theorem can be easily found online.</p>
<p>I’m not going to bore you with the details because 1, this is not the place for it and 2, I’m not ashamed to admit that I don’t even remember the proof and would just copy it from someplace else anyway.</p>
</section>
<section id="balancing-predictability-and-uncertainty" class="level2">
<h2 class="anchored" data-anchor-id="balancing-predictability-and-uncertainty">Balancing predictability and uncertainty</h2>
<p>So why does a more consistent result = a better game? (To me, at least.)</p>
<p>Of course it’s fun to have <em>some</em> unpredictability when we’re playing, otherwise we would simply discard the dice. But it’s always frustrating when you know that your character is very good in a skill but you KEEP. ROLLING. ONES.</p>
<p>As a DM, it’s also hard to explain why that keeps happening in a way that makes sense narratively. “Oh, you see that the door is completely rotten but you simply can’t break it despite your Strength (20)” More especifically about D&amp;D, it also creates some significant differences for classes such as Bard and Rogue.</p>
<p>I think only time will tell if MCDM’s 2d6 system works for me in the long run. But for now, I’m excited about changing things up a little and depending a little less on my misbehaving dice.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Despite being used in older editions, d20s started being the default dice starting at D&amp;D 3rd edition.↩︎</p></li>
<li id="fn2"><p>I hate to admit it, but I still confuse my d20s and d12s on occasion.↩︎</p></li>
<li id="fn3"><p>Tom Dunn has written a great series analyzing variability which I highly recommend in <a href="https://tomedunn.github.io/the-finished-book/theory/variability-attacks/">The Finished Book</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>stats</category>
  <category>RPG</category>
  <guid>https://hirota.dev/blog/posts/2024-03-18_dice-math/</guid>
  <pubDate>Mon, 18 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Advent of Code: Day 2</title>
  <dc:creator>Renata Hirota</dc:creator>
  <link>https://hirota.dev/blog/posts/2023-12-05-aor2/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hirota.dev/blog/posts/2023-12-05-aor2/xmas2.webp" class="preview-image img-fluid figure-img" alt="Red ball ornament"></p>
<figcaption>Photo by <a href="https://unsplash.com/@melpoole?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Mel Poole</a> on <a href="https://unsplash.com/photos/two-poinsettia-wreathes-izPKjgCxGfM?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a></figcaption>
</figure>
</div>
<p>If you haven’t read the <a href="https://hirota.dev/posts/2023-12-03-aor/">previous post</a>, I suggest you go back and do it. It’s got a little more context on <a href="https://adventofcode.com/2023/about">Advent of Code</a> and it’s a great way to see <a href="https://github.com/clente/aor"><code>{aor}</code></a> in action!</p>
<p>I know said I had exams and papers to write and I wasn’t expecting to write again so soon, but I was told Day 2 was easier than Day 1, so here I am! :)</p>
<section id="day-2-cube-conundrum" class="level2">
<h2 class="anchored" data-anchor-id="day-2-cube-conundrum">Day 2: Cube Conundrum</h2>
<p>Let’s start by fetching the puzzle and input for Day 2:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> aor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">day_start</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-12-02"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aoc2023/"</span>)</span>
<span id="cb1-2">✔ Fetched puzzle.</span>
<span id="cb1-3">✔ Fetched input.</span>
<span id="cb1-4">✔ Created directory aoc2023<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>_cube_conundrum</span>
<span id="cb1-5">✔ Wrote part <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> to aoc2023<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>_cube_conundrum<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>puzzle.R                                                                                        </span>
<span id="cb1-6">✔ Wrote input to aoc2023<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>_cube_conundrum<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>input.txt                                                                                        </span>
<span id="cb1-7">ℹ To fetch part <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, run <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aor::day_continue("2023-12-02", "aoc2023/02_cube_conundrum/puzzle.R")</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div>
<p>Again, there are many ways to solve the puzzle, but I ended up using <code>dplyr</code> and <code>tidyr</code>. Thankfully Day 2 was easier than Day 1; all you had to do was count red, green and blue balls and check some given conditions.</p>
<p>For the first part of the puzzle, you had to find all posible games given a number of balls (so you had to filter out games that exceeded that).</p>
<blockquote class="blockquote">
<p>For example, the record of a few games might look like this:<br>
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green<br>
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue<br>
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red<br>
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red<br>
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green<br>
In game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes. The Elf would first like to know which games would have been possible if the bag contained <em>only 12 red cubes, 13 green cubes, and 14 blue cubes</em>?</p>
</blockquote>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer for part 1, Day 2 – click to see my solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">input <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aoc2023/02_cube_conundrum/input.txt"</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-4">  readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_delim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"game_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sets"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-5">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(game_id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+"</span>)),</span>
<span id="cb2-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sets =</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(sets, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span>
<span id="cb2-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-9">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(sets) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-10">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(sets, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+(?= green)"</span>)),</span>
<span id="cb2-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blue =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(sets, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+(?= blue)"</span>)),</span>
<span id="cb2-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(sets, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+(?= red)"</span>))</span>
<span id="cb2-14">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-15">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace_na</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blue =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-16">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(game_id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-17">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(red <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> green <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> blue <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-18">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>(game_id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.keep_all =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-19">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(game_id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> _) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
</div>
</div>
</div>
<p>For part 2, you had to find the mininum number of balls of each color for each game.</p>
<blockquote class="blockquote">
<p>As you continue your walk, the Elf poses a second question: in each game you played, what is the <em>fewest number of cubes of each color</em> that could have been in the bag to make the game possible? Again consider the example games from earlier:<br>
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green<br>
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue<br>
In game 1, the game could have been played with as few as 4 red, 2 green, and 6 blue cubes. If any color had even one fewer cube, the game would have been impossible.<br>
Game 2 could have been played with a minimum of 1 red, 3 green, and 4 blue cubes.</p>
</blockquote>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer for part 2, Day 2 – click to see my solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-2">  readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_delim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"game_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sets"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(game_id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+"</span>)),</span>
<span id="cb3-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sets =</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(sets, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span>
<span id="cb3-6">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-7">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(sets) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-8">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb3-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(sets, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+(?= green)"</span>)),</span>
<span id="cb3-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blue =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(sets, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+(?= blue)"</span>)),</span>
<span id="cb3-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(sets, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+(?= red)"</span>))</span>
<span id="cb3-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-13">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace_na</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blue =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-14">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(game_id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-15">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_red =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(red), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_green =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(green), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_blue =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(blue)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-16">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">power =</span> max_red <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> max_green <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> max_blue) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-17">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(power) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
</div>
</div>
</div>
<p>If you have any other ideas, feel free to tell me more on <a href="https://fosstodon.org/@rmhirota">Mastodon</a> or <a href="https://bsky.app/profile/hirota.dev">Bluesky</a>.</p>
<p>Happy coding! &lt;3</p>


</section>

 ]]></description>
  <category>advent of code</category>
  <category>R</category>
  <guid>https://hirota.dev/blog/posts/2023-12-05-aor2/</guid>
  <pubDate>Tue, 05 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Advent of Code in R</title>
  <dc:creator>Renata Hirota</dc:creator>
  <link>https://hirota.dev/blog/posts/2023-12-03-aor/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hirota.dev/blog/posts/2023-12-03-aor/xmas.webp" class="preview-image img-fluid figure-img" alt="Red ball ornament"></p>
<figcaption>Photo by <a href="https://unsplash.com/@markusspiske?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Markus Spiske</a> on <a href="https://unsplash.com/photos/closeup-photo-of-red-ball-ornament-on-surface-AF_4tBQjdtc?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a></figcaption>
</figure>
</div>
<p>It’s <em>that</em> time of the year again! 🎄</p>
<p>I learned about <a href="https://adventofcode.com/2023/about">Advent of Code</a> a couple of years ago, when <a href="https://github.com/clente">Caio</a> challenged himself to complete every puzzle and post about it.</p>
<blockquote class="blockquote">
<p>Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as interview prep, company training, university coursework, practice problems, a speed contest, or to challenge each other. – <a href="https://adventofcode.com/2023/about">Advent of Code</a></p>
</blockquote>
<p>I’ve tried to solve some of them, but this time of the year is usually so hectic that I don’t think I ever got past day 6. Maybe this is the year I get to the second week? (Nevermind that I’m already late.)</p>
<p>I still have a full week ahead of exams and papers, so I’ll probably take it slow, but I wanted to lay the groundwork. I’m starting by installing <a href="https://github.com/clente/aor">{aor}</a>, which is a neat R package with some useful functions to help you with Advent of Code, so you can focus on actually solving the puzzles.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("devtools")</span></span>
<span id="cb1-2">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clente/aor"</span>)</span></code></pre></div>
<p>Once installed and with the right cookie configurations (all explained in <code>aor</code>’s readme), I can simply run</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> aor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">day_start</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-12-01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aoc2023/"</span>)</span>
<span id="cb2-2">✔ Fetched puzzle.</span>
<span id="cb2-3">✔ Fetched input.</span>
<span id="cb2-4">✔ Created directory aoc2023<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>_trebuchet</span>
<span id="cb2-5">✔ Wrote part <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> to aoc2023<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>_trebuchet<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>puzzle.R                                                                                        </span>
<span id="cb2-6">✔ Wrote input to aoc2023<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>_trebuchet<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>input.txt                                                                                        </span>
<span id="cb2-7">ℹ To fetch part <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, run <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aor::day_continue("2023-12-01", "aoc2023/01_trebuchet/puzzle.R")</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div>
<p>…and I’ll have a directory for that day’s puzzle, with a template for the code and the input text! It’s important to note that you must be logged in to get the puzzle input, as they are different across users.</p>
<p>Next step is solving the puzzles. I’m starting with day one.</p>
<section id="day-1-trebuchet" class="level2">
<h2 class="anchored" data-anchor-id="day-1-trebuchet">Day 1: Trebuchet?!</h2>
<p>To sum things up, the first part of day 1 is:</p>
<ul>
<li>Read a file with text</li>
<li>Identify the first and last numbers on each line (the “calibration”) and sum them up</li>
</ul>
<p>Every puzzle comes with a minimal example:</p>
<blockquote class="blockquote">
<p>For example:<br>
1abc2<br>
pqr3stu8vwx<br>
a1b2c3d4e5f<br>
treb7uchet<br>
In this example, the calibration values of these four lines are <code>12</code>, <code>38</code>, <code>15</code>, and <code>77</code>. Adding these together produces <em><code>142</code></em>.</p>
</blockquote>
<p>There are many ways this can be done, but I ended up using <code>dplyr</code> because I’m more used to it. With a little bit of regex, it was easy enough to extract the numbers that I needed to clear part 1.</p>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Answer for part 1, Day 1 – click to see my solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">input <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aoc2023/01_trebuchet/input.txt"</span></span>
<span id="cb3-2">input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-3">  readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-4">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-5">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb3-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">first =</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(input, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]"</span>),</span>
<span id="cb3-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">last =</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(input, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9](?!.*[0-9])"</span>),</span>
<span id="cb3-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">calibration =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(first, last))</span>
<span id="cb3-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-10">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(calibration) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
</div>
</div>
</div>
<p>Part 2 was a little bit trickier. The puzzle says:</p>
<blockquote class="blockquote">
<p>Your calculation isn’t quite right. It looks like some of the digits are actually <em>spelled out with letters</em>: <code>one</code>, <code>two</code>, <code>three</code>, <code>four</code>, <code>five</code>, <code>six</code>, <code>seven</code>, <code>eight</code>, and <code>nine</code> <em>also</em> count as valid “digits”. Equipped with this new information, you now need to find the real first and last digit on each line. For example:<br>
two1nine<br>
eightwothree<br>
abcone2threexyz<br>
xtwone3four<br>
4nineeightseven2<br>
zoneight234<br>
7pqrstsixteen<br>
In this example, the calibration values are <code>29</code>, <code>83</code>, <code>13</code>, <code>24</code>, <code>42</code>, <code>14</code>, and <code>76</code>. Adding these together produces <em><code>281</code></em>.</p>
</blockquote>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
First try for part 2, Day 1 – click to see my failed attempt
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>My first idea was using regex to get all ocurrences of numbers <em>and</em> spelled out numbers. So my regex would look something like</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">rx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]|one|two|three|four|five|six|seven|eight|nine"</span>)</span></code></pre></div>
<p>Then, I could switch the spelled out numbers, paste the first and last ones and sum them up.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">switch_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(num) {</span>
<span id="cb5-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(num, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a-z]"</span>)) {</span>
<span id="cb5-3">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span>(</span>
<span id="cb5-4">      num, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">one =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">two =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">three =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">four =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">five =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">six =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seven =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,</span>
<span id="cb5-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eight =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nine =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb5-6">    )</span>
<span id="cb5-7">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb5-8">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> num</span>
<span id="cb5-9">  }</span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(result)</span>
<span id="cb5-11">}</span>
<span id="cb5-12"></span>
<span id="cb5-13">input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-14">  readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-15">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-16">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numbers =</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(input, rx),</span>
<span id="cb5-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">first =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(numbers, head, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb5-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">last =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(numbers, tail, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb5-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">first =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(first, switch_numbers),</span>
<span id="cb5-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">last =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(last, switch_numbers),</span>
<span id="cb5-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">calibration =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(first, last))</span>
<span id="cb5-23">  )<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-24">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(calibration) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<p><em>But</em>, turns out I was wrong. You can see the problem with <code>str_extract_all</code> in this case:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"threeight"</span>, rx)</span>
<span id="cb6-2">[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb6-3">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span></span></code></pre></div>
<p>What I actually wanted:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb7-2">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span>  [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eight"</span></span></code></pre></div>
<p>The regex I was using does not take into account overlapping!</p>
</div>
</div>
</div>
<p>This takes us to attempt #2, where I try to take this problem into account with <code>stringi</code>.</p>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Second try for part 2, Day 1 – click to see my solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">switch_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(num) {</span>
<span id="cb8-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(num, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a-z]"</span>)) {</span>
<span id="cb8-3">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span>(</span>
<span id="cb8-4">      num, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">one =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">two =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">three =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">four =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">five =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">six =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seven =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,</span>
<span id="cb8-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eight =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nine =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb8-6">    )</span>
<span id="cb8-7">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb8-8">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> num</span>
<span id="cb8-9">  }</span>
<span id="cb8-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(result)</span>
<span id="cb8-11">}</span>
<span id="cb8-12"></span>
<span id="cb8-13">rx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(?=([0-9]|"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(xfun<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n2w</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"))"</span>)</span>
<span id="cb8-14"></span>
<span id="cb8-15">input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-16">  readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-17">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-18">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb8-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numbers =</span> stringi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_match_all_regex</span>(input, rx),</span>
<span id="cb8-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numbers =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(numbers, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>magrittr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract</span>(.x, ,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)),</span>
<span id="cb8-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">first =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(numbers, head, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb8-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">last =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(numbers, tail, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb8-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">first =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(first, switch_numbers),</span>
<span id="cb8-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">last =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_vec</span>(last, switch_numbers),</span>
<span id="cb8-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">calibration =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(first, last))</span>
<span id="cb8-26">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-27">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(calibration) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<p>Using a lookahead in the regex (?=) and <code>stringi::stri_match_all_regex</code> did the trick and got me to the right answer! 🥳</p>
</div>
</div>
</div>
<p>If you have any other ideas, feel free to tell me more on <a href="https://fosstodon.org/@rmhirota">Mastodon</a> or <a href="https://bsky.app/profile/hirota.dev">Bluesky</a>.</p>
<p>Happy coding! &lt;3</p>


</section>

 ]]></description>
  <category>advent of code</category>
  <category>R</category>
  <guid>https://hirota.dev/blog/posts/2023-12-03-aor/</guid>
  <pubDate>Sun, 03 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>What I learned at posit::conf(2023)</title>
  <dc:creator>Renata Hirota</dc:creator>
  <link>https://hirota.dev/blog/posts/2023-10-21_posit-conf/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hirota.dev/blog/posts/2023-10-21_posit-conf/trivia.webp" class="preview-image img-fluid figure-img" alt="A group of six people smiling with a backdrop illustrated with hex stickers"></p>
<figcaption>Our team at trivia night</figcaption>
</figure>
</div>
<p>I was honored to be an <strong>Opportunity Scholar</strong> on my first posit::conf ever, which means admission tickets, hotel and flight expeses were covered by Posit. Considering that just the admission ticket is a <em>lot</em> of money, especially if you come from a country with a weak currency, I would probably never even consider attending the conference out of my own pocket (although now that I’ve been to one, I’m dying to go again next year).</p>
<section id="so-what-happened-at-positconf" class="level2">
<h2 class="anchored" data-anchor-id="so-what-happened-at-positconf">So, what happened at posit::conf?</h2>
<p>I was (quite literally) speechless for most of the event (more on that later). It was so inspiring to see other Opportunity Scholars giving talks, sharing meals with fellow R nerds, and talking about everything that R allows us to do, from awesome presentations to great dataviz and reproducible modeling. It was also so nice to find common interests with various people outside of strictly professional topics.</p>
<p>I don’t think I’ll be able to summarize all 4 days, but here goes nothing. The following is a short list of my personal highlights of the conference. If you want to have an overall view of Posit’s announcements, head over to Posit’s blog post where they listed their <a href="https://posit.co/blog/five-takeaways-from-posit-conf-2023/">five takeaways from posit::conf(2023)</a>,</p>
<section id="quarto-quarto-and-more-quarto" class="level3">
<h3 class="anchored" data-anchor-id="quarto-quarto-and-more-quarto">1. Quarto, quarto and more quarto</h3>
<p>So many things are happening with Quarto! I’m especially excited to try out <strong>typst</strong>, which promises to be friendlier than LaTeX. I also finally started this blog and website, which had been in my plans for years.</p>
</section>
<section id="devops-for-data-scientists" class="level3">
<h3 class="anchored" data-anchor-id="devops-for-data-scientists">2. DevOps for data scientists</h3>
<p>DevOps was my choice for the first two days of workshops. It’s a shame that, because it was a two-day workshop, that meant I couldn’t do two different workshops, but I regret nothing. I learned so much (who’s intimidated by Docker now?? Not me, that’s for sure. Well, maybe just a little bit, but hey, baby steps), and once I got home, the project I was working on during the workshop evolved into this website. I bought the domain a few months back, and this was the push I needed to actually do something with it.</p>
</section>
<section id="r-ladies-are-awesome" class="level3">
<h3 class="anchored" data-anchor-id="r-ladies-are-awesome">3. R-Ladies are awesome</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hirota.dev/blog/posts/2023-10-21_posit-conf/rladies.webp" class="img-fluid figure-img" alt="A big group of people sitting and standing after the R-Ladies meetup."></p>
<figcaption>R-Ladies gathered at the Hyatt for Q&amp;A</figcaption>
</figure>
</div>
<p>I’m part of the local chapter of R-Ladies in Sao Paulo but had little to no interaction with the global team. The R-Ladies meetup on the last day was a great opportunity to better understand the workings of the organization and be inspired by awesome people who do such important work within the R community. More details of the meetup are available at <a href="https://rladies.org/news/2023-10-09-positconf-chicago-meetup/">this blog post</a>.</p>
</section>
<section id="the-discord-server" class="level3">
<h3 class="anchored" data-anchor-id="the-discord-server">4. The Discord server</h3>
<p>Being in a place with hundreds of people can be a little overwhelming. I found that the posit::conf Discord server was a great way to start a conversation (kudos for the foodie channel!) in a more controlled environment – while also keeping track of sticker drops!</p>
</section>
</section>
<section id="tips-and-hot-takes" class="level2">
<h2 class="anchored" data-anchor-id="tips-and-hot-takes">Tips and hot takes</h2>
<p>There are also a few things that I wanted to share with other people planning to attend next year.</p>
<section id="if-youre-an-introvert-know-that-there-are-others-like-you" class="level3">
<h3 class="anchored" data-anchor-id="if-youre-an-introvert-know-that-there-are-others-like-you">1. If you’re an introvert, know that there are others like you</h3>
<p>Yes, you, the person standing awkwardly in a corner while everyone else is mingling and seems to be having a great time. There are other people doing exactly the same. Try to approach them with some questions, maybe? Here are some basic conversation starters once you’re past the “what do you do for work” stage that are not <em>too</em> boring but also not too unrealistic:</p>
<ul>
<li>What talks did you like the most so far?</li>
<li>What did you learn that you are excited to try?</li>
<li>What’s your favorite R package?</li>
<li>What is the R community like where you’re based?</li>
<li>Is it your first time in {city}? Do you have any plans apart from the conf?</li>
</ul>
</section>
<section id="dont-assume-people-know-the-same-things-you-do" class="level3">
<h3 class="anchored" data-anchor-id="dont-assume-people-know-the-same-things-you-do">2. Don’t assume people know the same things you do</h3>
<p>Talking to people who are very knowledgeable can be either intimidating or mind-opening. I had a great time talking to a much more experienced developer who explained so much about their project in a friendly way that I felt welcomed to share my thoughts and ask questions. Be mindful not to be the arrogant person (even if unconsciously) who assumes people know what you’re talking about.</p>
</section>
<section id="its-ok-to-take-a-break" class="level3">
<h3 class="anchored" data-anchor-id="its-ok-to-take-a-break">3. It’s OK to take a break</h3>
<p>By the end of the second day, I was physically and mentally exhausted. To be honest, I was recovering from a cold a few days before my flight, and was feeling great, but two days of talking non-stop, some alcohol and early mornings made me so hoarse I could barely hear myself speak.</p>
<p>So I decided to skip some talks (that I knew would be recorded anyway, so I could catch up later) and rested. During one of my breaks, I had a lovely time making friendship bracelets at the arts and crafts table with other people who were recharging their social batteries. I’m also not much of a morning person, so I purposefully missed breakfast on the last day to have tea and some quiet time by myself outside the hotel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hirota.dev/blog/posts/2023-10-21_posit-conf/hyatt.webp" class="img-fluid figure-img" alt="posit conf logo at the entrance of the hyatt hotel."></p>
<figcaption>Saying farewell to posit::conf(2023)</figcaption>
</figure>
</div>
<p>It was absolutely amazing to attend posit::conf(2023). Next year it’s going to be in Seattle and I’m already thinking about <em>how</em> I’m going to be there. Fingers crossed for getting a talk acceppted! 🤞</p>


</section>
</section>

 ]]></description>
  <category>events</category>
  <category>R</category>
  <guid>https://hirota.dev/blog/posts/2023-10-21_posit-conf/</guid>
  <pubDate>Sat, 21 Oct 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
