{
  "hash": "6ca950da611c1a43dd93008675f39ef4",
  "result": {
    "markdown": "---\ntitle: \"D&D and the dice math\"\ndescription: \"How the roll of a die can change outcomes in games\"\nauthor: \"Renata Hirota\"\ndate: \"2024-03-18\"\ncategories: \n  - stats\n  - RPG\ndraft: false\nexecute:\n  echo: false\n---\n\n\n![Photo by <a\nhref=\"https://unsplash.com/@timothycdykes?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Timothy\nDykes</a> on <a\nhref=\"https://unsplash.com/photos/a-group-of-blue-and-brown-dice-sitting-on-top-of-each-other-jfovL-sc0tQ?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Unsplash</a>](d20.webp){fig-alt=\"Twenty sided dice\" .preview-image}\n\nSince the Covid pandemic, I really got into D&D. I had never played before, but\nhad friends who had long lasting parties and were DMs, so it was the perfect\nopportunity since we were all locked up in our houses.\n\nTurns out that it didn't last more than a few months: we started one campaign at\nlevel 1 and disbanded shortly after reaching level 6. Then I found out about\nCritical Role and became a huge fan (although I've given up on Campaign 3...)\nand started playing with my partner and his friends.\n\nAs you can imagine, it wasn't too long before I started DMing myself and I\neventually started watching some of Matt Colville's Twitch lives and YouTube\nvideos (really recommend those for DMs!). So when Matt's company MCDM started\ndesigning their own RPG, I was pretty excited (if you want to know more about\nit, you can listen to the podcast \n[The Dice Society](https://www.youtube.com/@the_dice_society), which covers \nnews on the development of the game).\n\nFor me, the game changer for this new RPG is the _dice_. Everyone who plays D&D,\nbe it 5th edition, AD&D or anything in between, is used to rolling d20s,\n20-sided dice[^1]. On the other hand, MCDM's RPG uses 2 regular, 6-sided dice\nfor attacking, making ability checks and other situations in which your\ncharacter might need to roll. As of now (March 2024), the game is still in\ndevelopment, so it still might change, but they made it very clear that they\nwant to keep the 2d6 system in the final version of the game.\n\n[^1]: Despite being used in older editions, d20s started being the default dice\n    starting at D&D 3rd edition.\n\n## Why I love the idea of the 2d6 system\n\nI know: d6s are kind of boring compared to d20s, right? Every Farkle and Yahtzee\nplayer uses them, after all. But to me, that could be a great advantage: it's\neasy to understand and hit the ground running as soon as you know the basic\nrules, no need to go through weird dice[^2]. \n\nAnd although I've become some sort of _dice hoarder_ for the past years, I love\nthe idea of rolling two dice, and more than that, two d6s, because of\n_variance_.\n\nLet's assume we're rolling a d20. The possible outcomes range from 1 to 20, and\ntecnically they all have the same probability, 1/20 = 5%. When rolling 2d6,\nthere is a smaller range of possibilities (2 to 12) and they are not uniformally\nprobable (you would expect to roll 12 much less frequently than 7, for example).\n\nThat means your _modifier_ has a much more significant impact on the final\nresult than sheer luck[^3]. If you are consistently rolling some value near the \nmean (7), how good you are at a certain ability will more accurately translate \nto how successful you are in a skill check or attack. Sure, you can still fumble \nor do exceptionally well, but those events are less common.\n\n[^2]: I hate to admit it, but I still confuse my d20s and d12s on occasion.\n\n[^3]: Tom Dunn has written a great series analyzing variability which I highly \nrecommend in [The Finished Book](https://tomedunn.github.io/the-finished-book/theory/variability-attacks/).\n\n## Simulating dice rolls\n\nI remember when I was younger and my Math teacher gave us an experiment: roll \ntwo dice 100 times and take note of the results. At the end of the class, we \ndrew a bar plot with the results and found out that everyone drew basically the \nsame plot.\n\nLet's do the same, but with the RPG context and in a larger scale. We'll check \nhow the outcome of a character with a dexterity bonus of +3 would roll for a \nskill check using different dice systems. (MCDM's stats are not exactly the \nsame, but let's just assume they are for this thought exercise.)\n\n### Rolling 1d20 1000 times\n\nAssuming that every side on a 20-sided die is physically the same, it's fair to\nconclude that the numbers 1 through 20 have the same probability of being the\noutcome. Let's imagine that we're rolling the die 100 times and counting how\nmany times each side appears.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nNow let's do the same, rolling the die 1000 times.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThe results seem random enough and there doesn't seem to be a clear pattern.\nEven if we add the modifier (+3), it's not that great a difference. The modifier\nmatters much less then the roll of a die.\n\nAs a game design, it makes sense that extremely good (or bad) results are rare,\nbut it's weird that average outcomes are equally probable.\n\n### Rolling 2d6 1000 times\n\nIf we were rolling only one d6, we would have a similar situation: all 6 sides\nhave the same probability. However, by adding two dice, we invoke the **Central\nLimit Theorem**!\n\nWhat is that, you ask? It's one of the most important theorems in probability\ntheory that says that, given a sample from a random variable under certain\ncircumstances, the sample mean tends to follow a normal distribution, even if\nthe original variable has a different distribution other than normal. More\ntechnically, the limit of a random variable X when n -> Inf is normally\ndistributed. More on that in the [next\nsection](#the-math-behind-it-the-central-limit-theorem).\n\nFor now, let's replicate the experiment we did with the d20, this time with 2d6.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThis plot shows what we've talked before: it's much more common to roll a 7\nthan, say, a 12. The same goes for the other end of the curve, too.\n\nNow let's take a look at what happens if we increase the number of rolls to a \nthousand:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nAnd a million:\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## The math behind it: the Central Limit Theorem\n\nIf you are not convinced by this little experiment, the \n[proof](https://en.wikipedia.org/wiki/Central_limit_theorem) for the theorem can \nbe easily found online. \n\nI'm not going to bore you with the details because 1, this is not the place for \nit and 2, I'm not ashamed to admit that I don't even remember the proof and \nwould just copy it from someplace else anyway.\n\n## Balancing predictability and uncertainty\n\nSo why does a more consistent result = a better game? (To me, at least.)\n\nOf course it's fun to have _some_ unpredictability when we're playing, otherwise \nwe would simply discard the dice. But it's always frustrating when you know that\nyour character is very good in a skill but you KEEP. ROLLING. ONES.\n\nAs a DM, it's also hard to explain why that keeps happening in a way that makes \nsense narratively. \"Oh, you see that the door is completely rotten but you \nsimply can't break it despite your Strength (20)\" More especifically about D&D, \nit also creates some significant differences for classes such as Bard and Rogue.\n\nI think only time will tell if MCDM's 2d6 system works for me in the long run. \nBut for now, I'm excited about changing things up a little and depending a \nlittle less on my misbehaving dice.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}